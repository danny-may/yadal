{
  "version": 3,
  "sources": ["ErlpackAdapter.test.ts"],
  "sourcesContent": ["import { describe, it } from \"node:test\";\nimport { ErlpackAdapter } from \"@yadal/gateway\";\nimport Erlpack from 'erlpack';\nimport assert from \"node:assert\";\n\ndescribe(ErlpackAdapter.name, () => {\n    const cases = getCases();\n    describe('serialize', () => {\n        for (const { name, buffer: expected, input } of cases) {\n            it('should serialize ' + name, () => {\n                // arrange\n                const sut = new ErlpackAdapter(Erlpack);\n\n                // act\n                const actual = sut.serialize(input);\n\n                // assert\n                assert.deepStrictEqual(Buffer.from(actual.buffer, actual.byteOffset, actual.byteLength), expected);\n            })\n        }\n    });\n    describe('deserialize', () => {\n        for (const { name, buffer, output: expected } of cases) {\n            it('should deserialize ' + name, () => {\n                // arrange\n                const sut = new ErlpackAdapter(Erlpack);\n\n                // act\n                const actual = sut.deserialize(buffer);\n\n                // assert\n                assert.deepStrictEqual(actual, expected);\n            })\n        }\n    })\n})\n\nfunction getCases() {\n    return rawCases().map(c => ({ ...c, buffer: Buffer.from(c.buffer, 'base64') }))\n}\n\nfunction rawCases(): Array<{ name: string, buffer: string, input: unknown, output: unknown }> {\n    return [\n        { name: 'null', buffer: 'g3MDbmls', input: null, output: null },\n        { name: 'number', buffer: 'g2F7', input: 123, output: 123 },\n        { name: 'string', buffer: 'g20AAAAJc29tZSB0ZXh0', input: 'some text', output: 'some text' },\n        { name: 'true', buffer: 'g3MEdHJ1ZQ==', input: true, output: true },\n        { name: 'false', buffer: 'g3MFZmFsc2U=', input: false, output: false },\n        { name: 'array', buffer: 'g2wAAAAFYQFtAAAAAWFzBHRydWVzBWZhbHNlcwNuaWxq', input: [1, 'a', true, false, null], output: [1, 'a', true, false, null] },\n        { name: 'object', buffer: 'g3QAAAABbQAAAARzb21ldAAAAAFtAAAABGRlZXB0AAAAAW0AAAAGb2JqZWN0bQAAAAVhYWFhYQ==', input: { some: { deep: { object: 'aaaaa' } } }, output: { some: { deep: { object: 'aaaaa' } } } },\n        { name: 'object with undefined prop', buffer: 'g3QAAAABbQAAAANhYmNhew==', input: { abc: 123, def: undefined }, output: { abc: 123 } },\n        { name: 'date', buffer: 'g20AAAAYMTk3MC0wMS0wMVQwMzoyNTo0NS42Nzha', input: new Date(12345678), output: '1970-01-01T03:25:45.678Z' }\n    ]\n}\n"],
  "mappings": "AAAA,SAAS,UAAU,UAAU;AAC7B,SAAS,sBAAsB;AAC/B,OAAO,aAAa;AACpB,OAAO,YAAY;AAEnB,SAAS,eAAe,MAAM,MAAM;AAChC,QAAM,QAAQ,SAAS;AACvB,WAAS,aAAa,MAAM;AACxB,eAAW,EAAE,MAAM,QAAQ,UAAU,MAAM,KAAK,OAAO;AACnD,SAAG,sBAAsB,MAAM,MAAM;AAEjC,cAAM,MAAM,IAAI,eAAe,OAAO;AAGtC,cAAM,SAAS,IAAI,UAAU,KAAK;AAGlC,eAAO,gBAAgB,OAAO,KAAK,OAAO,QAAQ,OAAO,YAAY,OAAO,UAAU,GAAG,QAAQ;AAAA,MACrG,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACD,WAAS,eAAe,MAAM;AAC1B,eAAW,EAAE,MAAM,QAAQ,QAAQ,SAAS,KAAK,OAAO;AACpD,SAAG,wBAAwB,MAAM,MAAM;AAEnC,cAAM,MAAM,IAAI,eAAe,OAAO;AAGtC,cAAM,SAAS,IAAI,YAAY,MAAM;AAGrC,eAAO,gBAAgB,QAAQ,QAAQ;AAAA,MAC3C,CAAC;AAAA,IACL;AAAA,EACJ,CAAC;AACL,CAAC;AAED,SAAS,WAAW;AAChB,SAAO,SAAS,EAAE,IAAI,QAAM,EAAE,GAAG,GAAG,QAAQ,OAAO,KAAK,EAAE,QAAQ,QAAQ,EAAE,EAAE;AAClF;AAEA,SAAS,WAAqF;AAC1F,SAAO;AAAA,IACH,EAAE,MAAM,QAAQ,QAAQ,YAAY,OAAO,MAAM,QAAQ,KAAK;AAAA,IAC9D,EAAE,MAAM,UAAU,QAAQ,QAAQ,OAAO,KAAK,QAAQ,IAAI;AAAA,IAC1D,EAAE,MAAM,UAAU,QAAQ,wBAAwB,OAAO,aAAa,QAAQ,YAAY;AAAA,IAC1F,EAAE,MAAM,QAAQ,QAAQ,gBAAgB,OAAO,MAAM,QAAQ,KAAK;AAAA,IAClE,EAAE,MAAM,SAAS,QAAQ,gBAAgB,OAAO,OAAO,QAAQ,MAAM;AAAA,IACrE,EAAE,MAAM,SAAS,QAAQ,gDAAgD,OAAO,CAAC,GAAG,KAAK,MAAM,OAAO,IAAI,GAAG,QAAQ,CAAC,GAAG,KAAK,MAAM,OAAO,IAAI,EAAE;AAAA,IACjJ,EAAE,MAAM,UAAU,QAAQ,gFAAgF,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,QAAQ,EAAE,EAAE,GAAG,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,QAAQ,QAAQ,EAAE,EAAE,EAAE;AAAA,IAC1M,EAAE,MAAM,8BAA8B,QAAQ,4BAA4B,OAAO,EAAE,KAAK,KAAK,KAAK,OAAU,GAAG,QAAQ,EAAE,KAAK,IAAI,EAAE;AAAA,IACpI,EAAE,MAAM,QAAQ,QAAQ,4CAA4C,OAAO,oBAAI,KAAK,QAAQ,GAAG,QAAQ,2BAA2B;AAAA,EACtI;AACJ;",
  "names": []
}
