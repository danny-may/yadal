{
  "version": 3,
  "sources": ["ZLibSyncAdapter.test.ts"],
  "sourcesContent": ["import fs from 'fs/promises';\nimport { describe, it } from 'node:test';\nimport { ZLibSyncContextAdapter, ZLibSyncContextAdapterFactory } from '@yadal/gateway';\nimport ZLibSync from 'zlib-sync';\nimport assert from 'node:assert';\nimport { fileURLToPath } from 'node:url';\nimport path from 'node:path';\n\nconst testDir = path.join(fileURLToPath(import.meta.url), '..');\n\ndescribe(ZLibSyncContextAdapter.name, () => {\n    it('Should decompress test case 1', async () => {\n        // arrange\n        const steps = [...deserializeTestCase(await fs.readFile(path.join(testDir, './zlibData/testCase1.dat')))];\n        const sut = new ZLibSyncContextAdapterFactory(ZLibSync.Inflate).createInflator();\n        const expected = steps.map(v => v.output).filter(o => o !== undefined);\n        const actual = [] as Uint8Array[];\n\n        // act\n        for (const step of steps) {\n            sut.push(step.input);\n            if (step.output !== undefined) {\n                const chunk = sut.flush();\n                actual.push(new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength));\n            }\n        }\n\n        // assert\n        assert.strictEqual(steps.length, 11);\n        assert.strictEqual(expected.length, 11);\n        assert.deepStrictEqual(actual, expected);\n    })\n})\n\nfunction* deserializeTestCase(data: ArrayBufferView) {\n    let offset = 0;\n    const buffer = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n    const reader = new DataView(data.buffer, data.byteOffset, data.byteLength)\n    while (offset < data.byteLength) {\n        const dataSize = reader.getInt32(offset);\n        offset += 4;\n        const input = buffer.slice(offset, offset += dataSize);\n        const hasFlush = reader.getInt8(offset);\n        offset += 1;\n        let output;\n        if (hasFlush) {\n            const dataSize = reader.getInt32(offset);\n            offset += 4;\n            output = buffer.slice(offset, offset += dataSize);\n        } else {\n            output = undefined;\n        }\n\n        yield { input, output }\n    }\n}"],
  "mappings": "AAAA,OAAO,QAAQ;AACf,SAAS,UAAU,UAAU;AAC7B,SAAS,wBAAwB,qCAAqC;AACtE,OAAO,cAAc;AACrB,OAAO,YAAY;AACnB,SAAS,qBAAqB;AAC9B,OAAO,UAAU;AAEjB,MAAM,UAAU,KAAK,KAAK,cAAc,YAAY,GAAG,GAAG,IAAI;AAE9D,SAAS,uBAAuB,MAAM,MAAM;AACxC,KAAG,iCAAiC,YAAY;AAE5C,UAAM,QAAQ,CAAC,GAAG,oBAAoB,MAAM,GAAG,SAAS,KAAK,KAAK,SAAS,0BAA0B,CAAC,CAAC,CAAC;AACxG,UAAM,MAAM,IAAI,8BAA8B,SAAS,OAAO,EAAE,eAAe;AAC/E,UAAM,WAAW,MAAM,IAAI,OAAK,EAAE,MAAM,EAAE,OAAO,OAAK,MAAM,MAAS;AACrE,UAAM,SAAS,CAAC;AAGhB,eAAW,QAAQ,OAAO;AACtB,UAAI,KAAK,KAAK,KAAK;AACnB,UAAI,KAAK,WAAW,QAAW;AAC3B,cAAM,QAAQ,IAAI,MAAM;AACxB,eAAO,KAAK,IAAI,WAAW,MAAM,QAAQ,MAAM,YAAY,MAAM,UAAU,CAAC;AAAA,MAChF;AAAA,IACJ;AAGA,WAAO,YAAY,MAAM,QAAQ,EAAE;AACnC,WAAO,YAAY,SAAS,QAAQ,EAAE;AACtC,WAAO,gBAAgB,QAAQ,QAAQ;AAAA,EAC3C,CAAC;AACL,CAAC;AAED,UAAU,oBAAoB,MAAuB;AACjD,MAAI,SAAS;AACb,QAAM,SAAS,IAAI,WAAW,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU;AAC3E,QAAM,SAAS,IAAI,SAAS,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU;AACzE,SAAO,SAAS,KAAK,YAAY;AAC7B,UAAM,WAAW,OAAO,SAAS,MAAM;AACvC,cAAU;AACV,UAAM,QAAQ,OAAO,MAAM,QAAQ,UAAU,QAAQ;AACrD,UAAM,WAAW,OAAO,QAAQ,MAAM;AACtC,cAAU;AACV,QAAI;AACJ,QAAI,UAAU;AACV,YAAMA,YAAW,OAAO,SAAS,MAAM;AACvC,gBAAU;AACV,eAAS,OAAO,MAAM,QAAQ,UAAUA,SAAQ;AAAA,IACpD,OAAO;AACH,eAAS;AAAA,IACb;AAEA,UAAM,EAAE,OAAO,OAAO;AAAA,EAC1B;AACJ;",
  "names": ["dataSize"]
}
