{
  "version": 3,
  "sources": ["NoOpCompressor.test.ts"],
  "sourcesContent": ["import { describe, it } from \"node:test\";\nimport { NoOpCompressor, NoOpCompressorFactory } from \"@yadal/gateway\";\nimport assert from \"node:assert\";\n\ndescribe(NoOpCompressor.name, () => {\n    describe('type', () => {\n        it('should have type none', () => {\n            // arrange\n\n            // act\n            const sut = new NoOpCompressor();\n\n            // assert\n            assert.strictEqual(sut.type, 'none');\n        });\n    });\n    describe('decompress', () => {\n        it('should do nothing to the given data', () => {\n            // arrange\n            const sut = new NoOpCompressor();\n            const input: ArrayBufferView = {\n                get buffer(): ArrayBuffer { throw null },\n                get byteLength(): number { throw null; },\n                get byteOffset(): number { throw null; }\n            }\n            const actual = [];\n\n            // act\n            for (const item of sut.decompress(input))\n                actual.push(item);\n\n\n            // assert\n            assert.strictEqual(actual.length, 1);\n            assert.strictEqual(actual[0], input);\n        });\n    })\n});\n\n\ndescribe(NoOpCompressorFactory.name, () => {\n    describe('createCompressor', () => {\n        it('should create a ' + NoOpCompressor.name, () => {\n            // arrange\n            const sut = new NoOpCompressorFactory();\n\n            // act\n            const actual = sut.createCompressor();\n\n            // assert\n            assert(actual instanceof NoOpCompressor);\n        });\n    });\n});"],
  "mappings": "AAAA,SAAS,UAAU,UAAU;AAC7B,SAAS,gBAAgB,6BAA6B;AACtD,OAAO,YAAY;AAEnB,SAAS,eAAe,MAAM,MAAM;AAChC,WAAS,QAAQ,MAAM;AACnB,OAAG,yBAAyB,MAAM;AAI9B,YAAM,MAAM,IAAI,eAAe;AAG/B,aAAO,YAAY,IAAI,MAAM,MAAM;AAAA,IACvC,CAAC;AAAA,EACL,CAAC;AACD,WAAS,cAAc,MAAM;AACzB,OAAG,uCAAuC,MAAM;AAE5C,YAAM,MAAM,IAAI,eAAe;AAC/B,YAAM,QAAyB;AAAA,QAC3B,IAAI,SAAsB;AAAE,gBAAM;AAAA,QAAK;AAAA,QACvC,IAAI,aAAqB;AAAE,gBAAM;AAAA,QAAM;AAAA,QACvC,IAAI,aAAqB;AAAE,gBAAM;AAAA,QAAM;AAAA,MAC3C;AACA,YAAM,SAAS,CAAC;AAGhB,iBAAW,QAAQ,IAAI,WAAW,KAAK;AACnC,eAAO,KAAK,IAAI;AAIpB,aAAO,YAAY,OAAO,QAAQ,CAAC;AACnC,aAAO,YAAY,OAAO,CAAC,GAAG,KAAK;AAAA,IACvC,CAAC;AAAA,EACL,CAAC;AACL,CAAC;AAGD,SAAS,sBAAsB,MAAM,MAAM;AACvC,WAAS,oBAAoB,MAAM;AAC/B,OAAG,qBAAqB,eAAe,MAAM,MAAM;AAE/C,YAAM,MAAM,IAAI,sBAAsB;AAGtC,YAAM,SAAS,IAAI,iBAAiB;AAGpC,aAAO,kBAAkB,cAAc;AAAA,IAC3C,CAAC;AAAA,EACL,CAAC;AACL,CAAC;",
  "names": []
}
